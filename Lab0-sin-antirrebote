/*
 * File: lab0.c
 * Luis J. Archila
 * 17/01/2022 
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = ON      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>


//**** Variables ****
//valores iniciales de 1 para que al multiplicar, el resultado no sea 0
char semaforo = 0b1;
int unidad = 0b1;
//valor inicial de 3 para comenzar mostrando '3' en el display
int i = 3;
//variable para comenzar la cuenta atras
int empezar = 0;
//antirrebote de botones
int b1 = 0, b2 = 0;

//**** Prototipos ****
void setup(void);
int display(int);
void ganador(void);
void botones(void);

//**** Interrupciones ****

void __interrupt() isr (void)
{
    if (INTCONbits.T0IF)
    {
        if (empezar)
        {
            TMR0 = 10;  //valor inicial de 10 con preescaler 1:256 y osc de 250kHz

            //*2 para aumentar decadas, +1 para mantener leds encendidos
            semaforo = (semaforo*2)+unidad; 

            //variable para mostrar numeros en el display
            if (i>0)
            {
                i--;
            }
            else if (i==0)
            {
                //se usa para que solo hasta que acabe la cuenta se pueda jugar
                empezar = 2;   
            }
        }
        INTCONbits.T0IF = 0;
    }
}

//**** Main ****

void main (void)
{
    setup();
    
    //main_loop
    while (1)
    {
        //iniciar carrera
        if (PORTBbits.RB0)
        {
            
        }
        
        // ---- semaforo de salida ----
        PORTE = semaforo;
        //evitar que se siga aumentando hasta el infinito
        if (semaforo>7)
        {
            semaforo = 0;
            unidad = 0;
        }
        
        // ---- mostrar valor deseado en el display ----
        // el valor depende del valor que tome 'i'
        display(i);
        
        
        //empezar la carrera al presionar el boton
        if (PORTBbits.RB0)
        {
            empezar = 0b1;
        }
        
        //el juego se ha empezado
        if (empezar == 2)
        {   
            
            if (PORTBbits.RB1)
            {
                PORTA = PORTA*2;
            }
            
            if (PORTBbits.RB2)
            {
                PORTD = PORTD*2;
            }
            
            // ---- verificar al ganador ----
            ganador();
            
        }
    }
}


//**** Funciones ****

void setup(void)
{
    // port_conf
    ANSEL = 0;
    ANSELH = 0;
    
    TRISB = 0b00000111;
    PORTB = 0;
    
    TRISD = 0;
    PORTD = 0b1;
    
    TRISC = 0;
    PORTC = 0;
    
    TRISA = 0;
    PORTA = 0b1;
    
    TRISE = 0;
    PORTE = 0;

    
    //osc_conf
    OSCCONbits.IRCF = 0b0010; //1 MHz
    OSCCONbits.SCS = 1; 

    //tmr0_conf
    //Timer0 Registers Prescaler= 256 - TMR0 Preset = 10 - Freq = 0.99 Hz - Period = 1.007616 seconds
    OPTION_REGbits.T0CS = 0;  // bit 5  TMR0 Clock Source Select bit...0 = Internal Clock (CLKO) 1 = Transition on T0CKI pin
    OPTION_REGbits.T0SE = 0;  // bit 4 TMR0 Source Edge Select bit 0 = low/high 1 = high/low
    OPTION_REGbits.PSA = 0;   // bit 3  Prescaler Assignment bit...0 = Prescaler is assigned to the Timer0
    OPTION_REGbits.PS2 = 1;   // bits 2-0  PS2:PS0: Prescaler Rate Select bits
    OPTION_REGbits.PS1 = 1;
    OPTION_REGbits.PS0 = 1;
    TMR0 = 10;             // preset for timer register

    //apagar bandera y habilitar interrupciones
    INTCONbits.T0IF = 0;
    INTCONbits.T0IE = 1;
    INTCONbits.GIE = 1;
    
    return;
}


int display (i)
{
    switch (i)
    {           
        case 1:
            //mostrar n√∫mero 1
            PORTC = 0x06;
            break;
            
        case 2:
            //mostrar numero 2
            PORTC = 0x5b;
            break;
            
        case 3:
            //mostrar numero 3
            PORTC = 0x4f;
            break;
            
        default:
            //PortC apagado
            PORTC = 0b10000000;
    }
}


void ganador(void)
{
    //jugador 1 (rojo) es el ganador
            if (PORTA == 0b10000000)
            {
                PORTBbits.RB7 = 1;
                empezar = 0;
                i = 1;
            }
            
            //jugador 2 (verde) es el ganador
            else if (PORTD == 0b10000000)
            {
                PORTBbits.RB6 = 1;
                empezar = 0;
                i = 2;
            }
}

void botones (void)
{
    
}
