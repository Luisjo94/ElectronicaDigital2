/*
 *Laboratorio 1 - Digital 2
 
 *Luis José Archila
  
 *24/01/2022
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = ON      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.


/*
                **** Librerias ****
 */
#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>
#include "display7.h"
#include "adc_config.h"
#define _XTAL_FREQ 1000000

/*
                **** Variables ****
 */
int swtch = 0;
int valor;
int display_u, display_d;



/*
                **** Prototipos ****
 */
void setup(void);


/*
                **** Interrupciones ****
 */
void __interrupt() isr (void)
{
    
    if (INTCONbits.RBIF)
    {
        if (!PORTBbits.RB0)
        {
            PORTD++;
        }
        
        if (!PORTBbits.RB3)
        {
            PORTD--;
        }
        
        INTCONbits.RBIF = 0;
    }
    
    if (INTCONbits.T0IF)
    {
        TMR0 = 248;
        switch(swtch)
        {
            case 0:
                PORTEbits.RE0 = 1;
                PORTEbits.RE1 = 0;
                display7seg(display_u);
                swtch = 1;
                break;
                
            case 1:
                PORTEbits.RE0 = 0;
                PORTEbits.RE1 = 1;
                display7seg(display_d);
                swtch = 0;
                break;
        }
        
        INTCONbits.T0IF = 0;
    }
    
    if (PIR1bits.ADIF)
    {
        valor = ADRESH;
        PIR1bits.ADIF = 0;
    }
    
}



/*
                **** MAIN ****
 */
void main(void)
{
    setup();
    adc();
    
    while(1)
    {
        
        if (ADCON0bits.GO == 0)
        {
            __delay_us(50);
            ADCON0bits.GO = 1;
        }
        
        if (valor > PORTD)
        {
            PORTBbits.RB7 = 1;
        }
        else
        {
            PORTBbits.RB7 = 0;
        }
        
        
        //separación de 'decenas' y 'unidades'
        display_u = valor%16;
        display_d = valor/16;  
    }
    
}



/*
                **** Funciones ****
 */
void setup(void)
{
    //confifuracion de pines y puertos
    ANSEL = 0b1;
    ANSELH = 0;
    
    TRISA = 0b1;
    TRISB = 0b1001;
    TRISC = 0;
    TRISD = 0;
    TRISE = 0;
    
    PORTA = 0;
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    
    
    //configuracion de oscilador
    OSCCONbits.IRCF = 0b0010; //1 MHz
    OSCCONbits.SCS = 1;
    
    
    //configuracion tmr0
    //Timer0 Registers Prescaler= 256 - TMR0 Preset = 254 - Freq = 488.28 Hz - Period = 0.002048 seconds
    OPTION_REGbits.T0CS = 0;  // bit 5  TMR0 Clock Source Select bit...0 = Internal Clock (CLKO) 1 = Transition on T0CKI pin
    OPTION_REGbits.T0SE = 0;  // bit 4 TMR0 Source Edge Select bit 0 = low/high 1 = high/low
    OPTION_REGbits.PSA = 0;   // bit 3  Prescaler Assignment bit...0 = Prescaler is assigned to the Timer0
    OPTION_REGbits.PS2 = 1;   // bits 2-0  PS2:PS0: Prescaler Rate Select bits
    OPTION_REGbits.PS1 = 1;
    OPTION_REGbits.PS0 = 1;
    TMR0 = 248;             // preset for timer register
    
    
    //apagar bandera y habilitar interrupciones
    INTCONbits.T0IF = 0;
    INTCONbits.T0IE = 1;
    INTCONbits.GIE = 1;
    
    
    //interrupciones PortB
    INTCONbits.RBIE = 1;
    IOCBbits.IOCB3=1;
    IOCBbits.IOCB0=1;
    INTCONbits.RBIF=0;
    
    //habilitar resistencias pull-up en PortB
    OPTION_REGbits.nRBPU = 0;
    WPUBbits.WPUB0  = 1;
    WPUBbits.WPUB3  = 1;
    
    
    
    
    return;
}
